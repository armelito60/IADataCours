source("C:/Users/Armel/Desktop/Cours ESIEA/Github/td1.R", echo=TRUE)
#Remplissage de la matrice de corrélation
for (i in 0:36) {
m1[i] <- correlation_mat[i]
}
source("C:/Users/Armel/Desktop/Cours ESIEA/Github/td1.R", echo=TRUE)
source("C:/Users/Armel/Desktop/Cours ESIEA/Github/td1.R", echo=TRUE)
source("C:/Users/Armel/Desktop/Cours ESIEA/Github/td1.R", echo=TRUE)
source("C:/Users/Armel/Desktop/Cours ESIEA/Github/td1.R", echo=TRUE)
source("C:/Users/Armel/Desktop/Cours ESIEA/Github/td1.R", echo=TRUE)
source("C:/Users/Armel/Desktop/Cours ESIEA/Github/td1.R", echo=TRUE)
install.packages("rgl")
#Représentation en 3D des trois variables
library(rgl)
plot3d(menu$Calories,
+ menu$Total.Fat, menu$Cholesterol, type="s")
#Centrage et réduction des données
list <- c("Calories", "Total.Fat", "Cholesterol")
data_macdo.cr <- scale(data_macdo[, list])
#Centrage et réduction des données
list <- c("Calories", "Total.Fat", "Cholesterol")
menu.cr <- scale(menu[, list])
lims <- c(min(menu.cr),max(menu.cr))
plot3d(menu.cr, type = "s", xlim = lims, ylim = lims,zlim = lims)
plot3d(menu.cr, type = "p", xlim = lims, ylim = lims,zlim = lims)
#Représentation en 3D des trois variables avec ellipse
data_macdo.cr_df <- as.data.frame(data_macdo.cr)
#Représentation en 3D des trois variables avec ellipse
menu.cr_df <- as.data.frame(menu.cr)
plot3d(menu.cr, type = "s", xlim = lims, ylim = lims,zlim = lims)
plot3d(ellipse3d(cor(cbind(menu.cr_df$Calories,
+ menu.cr_df$Total.Fat,menu.cr_df$Cholesterol))),
+ col="grey",add=TRUE)
#Représentation en 3D des trois variables avec ellipse
menu.cr_df <- as.data.frame(menu.cr)
plot3d(menu.cr, type = "s", xlim = lims, ylim = lims,zlim = lims)
plot3d(ellipse3d(cor(cbind(menu.cr_df$Calories,menu.cr_df$Total.Fat,menu.cr_df$Cholesterol))),col="grey",add=TRUE)
#Représentation en 3D des trois variables avec ellipse
menu.cr_df <- as.data.frame(menu.cr)
plot3d(menu.cr, type = "s", xlim = lims, ylim = lims,zlim = lims)
plot3d(ellipse3d(cor(cbind(menu.cr_df$Calories,menu.cr_df$Total.Fat,menu.cr_df$Cholesterol))),col="grey",add=TRUE)
#Représentation en 3D des trois variables avec ellipse
menu.cr_df <- as.data.frame(menu.cr)
plot3d(menu.cr, type = "s", xlim = lims, ylim = lims,zlim = lims)
plot3d(ellipse3d(cor(cbind(menu.cr_df$Calories,menu.cr_df$Total.Fat,menu.cr_df$Cholesterol))),col="grey",add=TRUE)
#Centrer les données avec scale et les réduire
list <- c("Sodium", "Sugars", "Protein")
menu.cr <- scale(menu[, list])
lims <- c(min(menu.cr),max(menu.cr))
plot3d(menu.cr, type = "s", xlim = lims, ylim = lims,zlim = lims)
#Représentation de l'ellispe de concentration
menu.cr_df <- as.data.frame(menu.cr)
plot3d(menu.cr, type = "s", xlim = lims, ylim = lims,zlim = lims)
plot3d(ellipse3d(cor(cbind(menu.cr_df$Sodium, menu.cr_df$Sugars,menu.cr_df$Protein))), col="grey",add=TRUE)
#Représentation de l'ellispe de concentration
menu.cr_df <- as.data.frame(menu.cr)
plot3d(menu.cr, type = "s", xlim = lims, ylim = lims,zlim = lims)
plot3d(ellipse3d(cor(cbind(menu.cr_df$Sodium, menu.cr_df$Sugars,menu.cr_df$Protein))), col="grey",add=TRUE)
install.packages("ade4")
library(ade4)
#ACP
list <- c("Calories","Total.Fat","Cholesterol")
acp <- dudi.pca(data_macdo[, list], center=TRUE, scale=TRUE, scannf = FALSE, nf = 3)
#ACP
list <- c("Calories","Total.Fat","Cholesterol")
acp <- dudi.pca(menu[, list], center=TRUE, scale=TRUE, scannf = FALSE, nf = 3)
names(acp)
tab
tab.names()
print(summary(tab))
View(acp)
View(menu.cr)
View(acp)
View(menu.cr)
View(menu.cr)
view(tab)
summary(acp$tab)
menu.cr
acp$tab
#Centrage et réduction des données
list <- c("Calories", "Total.Fat", "Cholesterol")
menu.cr <- scale(menu[, list])
lims <- c(min(menu.cr),max(menu.cr))
plot3d(menu.cr, type = "p", xlim = lims, ylim = lims,zlim = lims)
summary(menu.cr)
summary(acp$tab)
View(acp)
var <- sum((x-mean(x))^2)/length(x)
var <- function(x) sum((x-mean(x))^2)/length(x)
scale.n <- function(x) (x - mean(x))/sqrt(var.n(x))
head(apply(mesures, 2, scale.n))
head(apply(menu.cr, 2, scale.n))
scale.n <- function(x) (x - mean(x))/sqrt(var(x))
head(apply(menu.cr, 2, scale.n))
apply(menu.cr, 2, scale.n)
var <- function(x) sum((x-mean(x))^2)/length(x)
scale <- function(x) (x - mean(x))/sqrt(var(x))
apply(menu.cr, 2, scale)
apply(menu.cr, 3, scale)
apply(menu.cr, 2, scale)
apply(menu.cr, 1, scale)
apply(menu.cr, 2, scale)
