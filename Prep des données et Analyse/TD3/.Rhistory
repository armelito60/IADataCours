install.packages("ade4")
library(ade4)
install.packages("ade4")
install.packages("ade4")
install.packages("adegraphics")
library(ade4)
library(adegraphics)
setwd(dir = "C:/Users/Armel/Desktop/Cours ESIEA/Github/Prep des données et Analyse/TD3")
#Import des données au format csv
pokemon <- read.csv("C:/Users/Armel/Desktop/Cours ESIEA/Github/Prep des données et Analyse/TD3/pokemon.csv")
#Import des données au format csv
poke <- read.csv("C:/Users/Armel/Desktop/Cours ESIEA/Github/Prep des données et Analyse/TD3/pokemon.csv")
poke <- as.data.frame(poke)
print(summary(poke))
poke$Generation <- as.factor(poke$Generation)
class(poke$Generation)
summary(poke)
print(poke)
poke_bis <- c(poke$Type.1, poke$Generation, poke$Legendary)
poke_bis
View(poke)
View(poke)
poke[2]
poke[3]
poke_bis <- poke[,c(3,12,13)]
View(poke_bis)
summary(poke)
res.acm.poke<-dudi.acm(poke.x,scannf=FALSE)
res.acm.poke<-dudi.acm(poke_bis,scannf=FALSE)
summary(poke_bis)
poke_bis$Type.1 <- as.factor(poke_bis$Type.1)
poke_bis$Legendary <- as.factor(poke_bis$Legendary)
res.acm.poke<-dudi.acm(poke_bis,scannf=FALSE)
summary(poke_bis)
#Affichage de valeurs propres
fviz_screeplot(res.acm.poke)
install.packages("devtools")
library("factoextra")
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
library("factoextra")
#Affichage de valeurs propres
fviz_screeplot(res.acm.poke)
#selection axes pour inertie ajustée
a=1
vp.benz=0
K = length(res$eig[,1])
get_eig(res.acm.poke)
#selection axes pour inertie ajustée
a=1
vp.benz=0
K = length(poke$eig[,1])
J = length(poke$var$eta2[,1])
for (i in 1:K)
{
if (poke$eig[i,1]>1/J)
{vp.benz[a] = ((J/(J-1))*(poke$eig[i,1]-1/J))^2
a=a+1}
}
vp.benz[1:a-1]
barplot(vp.benz[1:a-1],
names=paste("Dim",1:length(vp.benz[1:a-1])),
main="Inertie ajustée - Correction de Benzecri",
col="orange", border="white")
poke$var$eta2[,1]
poke$var$eta2
poke$eig
res <- get_eig(res.acm.poke)
res$eigenvalue
res$eigenvalue[,1]
View(poke_bis)
View(poke_bis)
#selection axes pour inertie ajustée
a=1
vp.benz=0
K = length(res$eigenvalue)
J = length(res$variance.percent)
for (i in 1:K)
{
if (res$eigenvalue[i,1]>1/J)
{vp.benz[a] = ((J/(J-1))*(res$eigenvalue[i,1]-1/J))^2
a=a+1}
}
#selection axes pour inertie ajustée
a=1
vp.benz=0
K = length(res$eigenvalue)
J = length(res$variance.percent)
for (i in 1:K)
{
if (res$eigenvalue[i,1]>1/J)
{vp.benz[a] = ((J/(J-1))*(res$eigenvalue[i]-1/J))^2
a=a+1}
}
#selection axes pour inertie ajustée
a=1
vp.benz=0
K = length(res$eigenvalue)
J = length(res$variance.percent)
for (i in 1:K)
{
if (res$eigenvalue[i]>1/J)
{vp.benz[a] = ((J/(J-1))*(res$eigenvalue[i]-1/J))^2
a=a+1}
}
vp.benz[1:a-1]
barplot(vp.benz[1:a-1],
names=paste("Dim",1:length(vp.benz[1:a-1])),
main="Inertie ajustée - Correction de Benzecri",
col="orange", border="white")
length(res$eigenvalue)
length(res$variance.percent)
#Affichage de valeurs propres
fviz_screeplot(res.acm.poke)
res <- get_eig(res.acm.poke)
#selection axes pour inertie ajustée
mean_vac <- mean(res$variance.percent)
mean_vac
res.acm.poke
res
res[c(1,6),]
res[c(1,2,3,4,5,6),]
res_ajustee <- res[c(1,2,3,4,5,6),]
fviz_screeplot(res_ajustee.acm.poke)
res_ajustee.acm.poke<-dudi.acm(poke_bis,scannf=FALSE)
fviz_screeplot(res_ajustee.acm.poke)
fviz_screeplot(res_ajustee.acm.poke)
get_eig(res_ajustee.acm.poke)
res_ajustee
#Affichage de valeurs propres
fviz_screeplot(res.acm.poke)
res <- get_eig(res.acm.poke)
#selection axes pour inertie ajustée
mean_vac <- mean(res$variance.percent)
res_ajustee <- res[c(1,2,3,4,5,6),]
res_ajustee.acm.poke<-dudi.acm(poke_bis,scannf=FALSE)
fviz_screeplot(res_ajustee)
#Fonction dudi.acm() aevc ade4
poke_bis$Type.1 <- as.factor(poke_bis$Type.1)
poke_bis$Legendary <- as.factor(poke_bis$Legendary)
res.acm.poke<-dudi.acm(poke_bis,scannf=FALSE)
#Affichage de valeurs propres
fviz_screeplot(res.acm.poke)
res <- get_eig(res.acm.poke)
#selection axes pour inertie ajustée
mean_vac <- mean(res$variance.percent)
res_ajustee <- res[c(1,2,3,4,5,6),]
fviz_screeplot(res_ajustee)
#
#Affichage de valeurs propres
fviz_screeplot(res.acm.poke)
setwd(dir = "C:/Users/Armel/Desktop/Cours ESIEA/Github/Prep des données et Analyse/TD3")
#Import des données au format csv
poke <- read.csv("C:/Users/Armel/Desktop/Cours ESIEA/Github/Prep des données et Analyse/TD3/pokemon.csv")
poke <- as.data.frame(poke)
print(summary(poke))
#Transformation de la variable Generation en type factor
poke$Generation <- as.factor(poke$Generation)
class(poke$Generation)
#Jeu de données avec variables Type.1, Generation, Legendary
poke_bis <- poke[,c(3,12,13)]
summary(poke)
#Fonction dudi.acm() aevc ade4
poke_bis$Type.1 <- as.factor(poke_bis$Type.1)
poke_bis$Legendary <- as.factor(poke_bis$Legendary)
res.acm.poke<-dudi.acm(poke_bis,scannf=FALSE)
#Affichage de valeurs propres
fviz_screeplot(res.acm.poke)
res <- get_eig(res.acm.poke)
#selection axes pour inertie ajustée
mean_vac <- mean(res$variance.percent)
res_ajustee <- res[c(1,2,3,4,5,6),]
fviz_screeplot(res_ajustee)
score(res.acm.poke,xax=1)
score(res.acm.poke,xax=1, type="boxplot")
nlevels(poke$Type.1)
nlevels(poke_bis$Type.1)
head(inertia.dudi(res.acm.poke)$TOT)
head(inertia.dudi(res.acm.poke)$TOT)
scatter(res.acm.poke)
res.acm.poke$cr
res.acm.poke[1]
res.acm.poke[1,1]
res.acm.poke$cr
fviz_screeplot(res_ajustee.acm.poke)
res$cw
res.acm.poke$cw
res.acm.poke['Type.1']$cw
View(res_ajustee)
View(res_ajustee.acm.poke)
res.acm.poke$c1
res.acm.poke$li
res.acm.poke$c1
res.acm.poke$contrib
res.acm.poke$cw
res.acm.poke$li
res.acm.poke['Type.1']$cw
res.acm.poke[Type.1]$cw
res.acm.poke$Type.1$cw
res.acm.poke$cw
res.acm.poke$c1
help("dudi.acm")
res.acm.poke$var
res.acm.poke$c1
res_sorted <- res.acm.poke$c1
res.acm.poke[1,]$c1
sort(res.acm.poke[,1]$c1)
sort(res.acm.poke[,1]$c1, decreasing = TRUE)
sort(res.acm.poke$c1[,1], decreasing = TRUE)
sort(abs(res.acm.poke$c1[,1]), decreasing = TRUE)
install.packages("vcd")
poke_bis[,1]
assocstats(table())
#tableau de contingence
library("vcd")
poke_bis[,1]
col1 <- poke_bis[,1]
col2 <- poke_bis[,2]
col3 <- poke_bis[,3]
table(col1, col2, col3)
table(poke_bis[,1], poke_bis[,2], poke_bis[,3])
